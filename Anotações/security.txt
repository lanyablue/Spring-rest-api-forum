Spring boot security

O Spring Boot possui um módulo focado somente nessa parte de segurança, que cuida da parte de autenticação e autorização
Para isso no pom.xml é adicionada a dependencia spring-boot-starter-security

As configurações de segurança geralmente são feitas no application.properties. Porem esta parte é um pouco complicada,
pois existe diversas configurações, muita coisa dinamica, portanto todas as configurações serão feitas via classe java

Criado um novo pacote de security com a classe SecurityConfigurations, começamos com as anotações
@EnableWebSecurity anotação resposavel por habilitar a parte do Spring Security 
@Configuration por ser uma classe de configurações, fará o spring carregar e ler todas as configurações dentro da classe

Além disso, a classe herda uma classe chamada WebSecurityConfigurerAdapter, essa classe tem métodos de configuração, e agora
a aplicação está completamente trancada, ou seja, por padrão o spring bloqueia todo o acesso a nossa api, tudo está restrito
até que as configurações libere o que precisa ser liberado.


Para liberar acessos começaremos a sobrescrever tres metodos configure, sendo:
configure(AuthenticationManagerBuilder auth) - configurações de autenticação
configure(HttpSecurity http) - configurações de autorização
configure(WebSecurity web) - configurações de recursos estáticos (js, css, imagens etc)

Começando pelo HttpSecurity, a configuração é feita da seguinte forma pelo parametro:
 http.authorizeRequests()
                .antMatchers(HttpMethod.GET, "/topicos").permitAll()
                .antMatchers(HttpMethod.GET, "/topicos/*").permitAll();
				
Acima estou autorizando alguns requests do tipo GET, no caso será os dois métodos do controller listar e detalhar por id,
pelo método antiMatchers, foi passado como parametro o tipo de requisição e sua url correspondente.

Em seguida entramos com  .anyRequest().authenticated() para garantir que todas as outras requisições estejam 
autenticadas, ou seja, so conseguirá acessar e disparar requisições se o cliente estiver autenticado

Logica de autenticação:

Para começar a ideia de autenticação no projeto, teremos que ter classe que represente o usuario e a senha dele, e 
seu perfil de acesso. Nesta entidade possuimos id, nome, email, e senha, sendo email e senha as informações que 
utilizará para se autenticar no sistema, para isso a classe implementará uma interface chamada UserDetails, que é 
responder por dizer que esta é a classe que contem detalhes de um usuario

Logo com essa interface vem a implementação de métodos obrigatorios:

	@Override
	public Collection<? extends GrantedAuthority> getAuthorities() {
		return this.perfis;
	}

	@Override
	public String getPassword() {
		return this.senha;
	}

	@Override
	public String getUsername() {
		return this.email;
	}

	@Override
	public boolean isAccountNonExpired() {
		return true;
	}

	@Override
	public boolean isAccountNonLocked() {
		return true;
	}

	@Override
	public boolean isCredentialsNonExpired() {
		return true;
	}

	@Override
	public boolean isEnabled() {
		return true;
	}

Para saber a senha do seu usuário, o spring chamará o método getPassword(), que então devolverá senha (return this.senha), e 
para saber seu username getUsername() que o retorno será o email (return this.email)

Os metodos que devolvem booleanos são métodos de controle da conta do usuario, caso a conta esteja bloqueada, se possui 
data de expiração ou coisas do genero, no caso do exemplo não foi utilizado nenhum caso.

O método public Collection<? extends GrantedAuthority> getAuthorities() precisa devolver uma collection de GrantedAuthority, 
pois para o spring security, além de ter uma classe de usuario, precisa-se de uma classe que representa o perfil do usuario,
que é o perfil relacionado com as permissões de acesso dele, para devolver qual atributo contem a coleção com os perfis 
desse usuario

para isso é criado mais um atributo na classe usuario chamado perfis, do tipo List<Perfil>, sendo inicializada com new ArrayList<>()

Logo é preciso criar uma nova tabela Perfil no pacote modelo, está classe é uma entidade e por isso recebe @Entity, e alem do
id ter um atributo que é uma string com o nome do perfil, com qual é o perfil de acesso, se é aluno, moderador, admin, o nome do
perfil que esta acessando, com seus getters e setters de id e atributo nome
A classe que representa o perfil precisa implementar a interface GrantedAuthority para dizer ao spring que esta é a classe que 
representa o perfil de acesso. Essa interface vem com o metodo que é o getAuthority para devolvermos qual o atributo 
que tem o nome do authority, o nome do perfil logo return nome;
Como a classe Perfil é uma entidade é necessario dizer qual o relacionamento, a cardinalidade entre usuario e perfil.
Como um usuario pode ter varios perfis, e um perfil ta atrelado a mais de um usuario, a relação será manytomany

Agora na classe de configuração, depois do metodo .authenticated() vem os métodos .and().formLogin(). Aqui estou 
dizendo para o spring gerar um formulario de autenticação, o spring já possui um formulario de autenticação e um 
controller que recebe as requisições desse formulario.

Testando essas configurações no browser, o spring cria uma pagina de login, um form de login ao tentar acessar
o localhost:8080, agora é configurar a logica de autenticação

A logica de autenticação começa no método configure que recebe como parametro auth, esse parametro possui
varios métodos, incluindo o usarDetailsService(), que é para dizer ao spring qual é a classe, a service que possui 
a logica de autenticação, para isso é criada a classe AutenticaçãoService:
auth.userDetailsService(autenticacaoService)

Essa classe é gerenciada pelo spring e por isso recebe a anotação @Service, e para dizermos ao spring que essa 
service é a service que possui a logica de autenticação, ela implementa a interface UserDetailsService,
essa interface possui um metodo a ser implementado que é o loadUserByUsername(String username).

Quando alguem acessar o formulario de login, digitar o email e clicar no botão login, o spring saberá 
que essa é a classe de autenticação e chamará este método, que recebe como parametro o email
que foi digitado na tela de login. Para o spring so basta o email e fazer a consulta no banco de dados só 
por isso, a senha ele faz em memoria. No geral, em uma aplicação já fazemos a consulta no banco filtrando 
pelo usuário e pela senha. No spring security buscamos pelo email e ele faz a checagem da senha em memoria.

É criada também um UsuarioRepository para fazer a busca no banco pelos dados do usuario, esse usuario repository
é criado o metodo findByEmail(String email).
Voltando na service chamamos o repository atraves do @autowired (injeção de dependencia).
Optional<Usuario> usuario = usuarioRepository.findByEmail(username);
Ele precisa ter o retorno optional pois caso o usuario passe um email que nao existe, ele jogará uma exceção.
 if (usuario.isPresent()) {
            return usuario.get();
}
Esse if serve para pegar o usuario caso ele seja encontrado no banco de dados.
Caso ele não encontre, devolvemos uma exceção ao cliente throw new UsernameNotFoundException("Dados invalidos");

Voltando ao securityConfiguration, é injetada a service que faz a autenticação pela notação @autowired

.passwordEncoder(new BCryptPasswordEncoder()) metodo para fazer um algoritmo de hash da senha 












				
				
